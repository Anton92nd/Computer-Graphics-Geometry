<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>